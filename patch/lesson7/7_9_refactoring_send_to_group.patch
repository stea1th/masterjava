Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/GroupResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/GroupResult.java	(revision )
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/GroupResult.java	(revision )
@@ -0,0 +1,23 @@
+package ru.javaops.masterjava.service.mail;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class GroupResult {
+    private int success; // number of successfully sent email
+    private List<MailResult> failed; // failed emails with causes
+    private String failedCause;  // global fail cause
+
+    @Override
+    public String toString() {
+        return "Success: " + success + '\n' +
+                (failed == null ? "" : "Failed: " + failed.toString() + '\n') +
+                (failedCause == null ? "" : "Failed cause: " + failedCause);
+    }
+}
\ No newline at end of file
Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailResult.java	(revision )
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailResult.java	(revision )
@@ -0,0 +1,25 @@
+package ru.javaops.masterjava.service.mail;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.NonNull;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class MailResult {
+    public static final String OK = "OK";
+
+    private @NonNull String email;
+    private String result;
+
+    public boolean isOk() {
+        return OK.equals(result);
+    }
+
+    @Override
+    public String toString() {
+        return '\'' + email + "' result '" + result + '\'';
+    }
+}
\ No newline at end of file
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java	(date 1511834626000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailSender.java	(revision )
@@ -1,6 +1,7 @@
 package ru.javaops.masterjava.service.mail;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.apache.commons.mail.EmailException;
@@ -8,15 +9,20 @@
 import ru.javaops.masterjava.service.mail.persist.MailCase;
 import ru.javaops.masterjava.service.mail.persist.MailCaseDao;
 
-import java.util.List;
+import java.util.Set;
 
 @Slf4j
 public class MailSender {
     private static final MailCaseDao MAIL_CASE_DAO = DBIProvider.getDao(MailCaseDao.class);
 
-    static void sendMail(List<Addressee> to, List<Addressee> cc, String subject, String body) {
+    static MailResult sendTo(Addressee to, String subject, String body) {
+        val state = sendToGroup(ImmutableSet.of(to), ImmutableSet.of(), subject, body);
+        return new MailResult(to.getEmail(), state);
+    }
+
+    static String sendToGroup(Set<Addressee> to, Set<Addressee> cc, String subject, String body) {
         log.info("Send mail to \'" + to + "\' cc \'" + cc + "\' subject \'" + subject + (log.isDebugEnabled() ? "\nbody=" + body : ""));
-        String state = "OK";
+        String state = MailResult.OK;
         try {
             val email = MailConfig.createHtmlEmail();
             email.setSubject(subject);
@@ -38,5 +44,6 @@
         }
         MAIL_CASE_DAO.insert(MailCase.of(to, cc, subject, state));
         log.info("Sent with state: " + state);
+        return state;
     }
 }
Index: services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/persist/MailCaseTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/persist/MailCaseTestData.java	(date 1511834626000)
+++ services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/persist/MailCaseTestData.java	(revision )
@@ -1,6 +1,7 @@
 package ru.javaops.masterjava.service.mail.persist;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.service.mail.Addressee;
 
@@ -15,10 +16,10 @@
 
     static final List<MailCase> MAIL_CASES = ImmutableList.of(
             MailCase.of(
-                    ImmutableList.of(
+                    ImmutableSet.of(
                             new Addressee("ИмяTo1 Фамилия1 <mailTo1@ya.ru>"),
                             new Addressee("Имя2 Фамилия2 <mailTo2@ya.ru>")),
-                    ImmutableList.of(
+                    ImmutableSet.of(
                             new Addressee("ИмяCc1 Фамилия1 <mail1Cc@ya.ru>"),
                             new Addressee("ИмяCc2 Фамилия2 <mailCc2@ya.ru>")),
                     "subject1", "state1"
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java	(date 1511834626000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java	(revision )
@@ -1,13 +1,13 @@
 package ru.javaops.masterjava.service.mail;
 
 import javax.jws.WebService;
-import java.util.List;
+import java.util.Set;
 
 @WebService(endpointInterface = "ru.javaops.masterjava.service.mail.MailService", targetNamespace = "http://mail.javaops.ru/"
 //          , wsdlLocation = "WEB-INF/wsdl/mailService.wsdl"
 )
 public class MailServiceImpl implements MailService {
-    public void sendMail(List<Addressee> to, List<Addressee> cc, String subject, String body) {
-        MailSender.sendMail(to, cc, subject, body);
+    public String sendToGroup(Set<Addressee> to, Set<Addressee> cc, String subject, String body) {
+        return MailSender.sendToGroup(to, cc, subject, body);
     }
 }
\ No newline at end of file
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/persist/MailCase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/persist/MailCase.java	(date 1511834626000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/persist/MailCase.java	(revision )
@@ -7,7 +7,7 @@
 import ru.javaops.masterjava.service.mail.Addressee;
 
 import java.util.Date;
-import java.util.List;
+import java.util.Set;
 
 @Data
 @AllArgsConstructor
@@ -21,7 +21,7 @@
     private String state;
     private Date datetime;
 
-    public static MailCase of(List<Addressee> to, List<Addressee> cc, String subject, String state){
+    public static MailCase of(Set<Addressee> to, Set<Addressee> cc, String subject, String state){
         return new MailCase(Joiner.on(", ").join(to), Joiner.on(", ").join(cc), subject, state, new Date());
     }
 }
\ No newline at end of file
Index: services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/MailServiceClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/MailServiceClient.java	(date 1511834626000)
+++ services/mail-service/src/test/java/ru/javaops/masterjava/service/mail/MailServiceClient.java	(revision )
@@ -1,6 +1,6 @@
 package ru.javaops.masterjava.service.mail;
 
-import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 
 import javax.xml.namespace.QName;
 import javax.xml.ws.Service;
@@ -15,7 +15,7 @@
                 new QName("http://mail.javaops.ru/", "MailServiceImplService"));
 
         MailService mailService = service.getPort(MailService.class);
-        mailService.sendMail(ImmutableList.of(
+        mailService.sendToGroup(ImmutableSet.of(
                 new Addressee("masterjava@javaops.ru", null)), null, "Subject", "Body");
     }
 }
Index: services/mail-api/src/test/java/ru/javaops/masterjava/service/mail/MailWSClientMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/test/java/ru/javaops/masterjava/service/mail/MailWSClientMain.java	(date 1511834626000)
+++ services/mail-api/src/test/java/ru/javaops/masterjava/service/mail/MailWSClientMain.java	(revision )
@@ -1,11 +1,11 @@
 package ru.javaops.masterjava.service.mail;
 
-import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 
 public class MailWSClientMain {
     public static void main(String[] args) {
-        MailWSClient.sendMail(
-                ImmutableList.of(new Addressee("To <masterjava@javaops.ru>")),
-                ImmutableList.of(new Addressee("Copy <masterjava@javaops.ru>")), "Subject", "Body");
+        MailWSClient.sendToGroup(
+                ImmutableSet.of(new Addressee("To <masterjava@javaops.ru>")),
+                ImmutableSet.of(new Addressee("Copy <masterjava@javaops.ru>")), "Subject", "Body");
     }
 }
\ No newline at end of file
Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/Addressee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/Addressee.java	(date 1511834626000)
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/Addressee.java	(revision )
@@ -1,13 +1,11 @@
 package ru.javaops.masterjava.service.mail;
 
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import lombok.NonNull;
+import lombok.*;
 
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
+@EqualsAndHashCode(of = "email")
 public class Addressee {
     private @NonNull String email;
     private String name;
Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailService.java	(date 1511834626000)
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailService.java	(revision )
@@ -3,7 +3,7 @@
 import javax.jws.WebMethod;
 import javax.jws.WebParam;
 import javax.jws.WebService;
-import java.util.List;
+import java.util.Set;
 
 @WebService(targetNamespace = "http://mail.javaops.ru/")
 //@SOAPBinding(
@@ -13,9 +13,9 @@
 public interface MailService {
 
     @WebMethod
-    void sendMail(
-            @WebParam(name = "to") List<Addressee> to,
-            @WebParam(name = "cc") List<Addressee> cc,
+    String sendToGroup(
+            @WebParam(name = "to") Set<Addressee> to,
+            @WebParam(name = "cc") Set<Addressee> cc,
             @WebParam(name = "subject") String subject,
             @WebParam(name = "body") String body);
 }
\ No newline at end of file
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java	(date 1511834626000)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceExecutor.java	(revision )
@@ -1,26 +1,28 @@
 package ru.javaops.masterjava.service.mail;
 
+import lombok.extern.slf4j.Slf4j;
+import one.util.streamex.StreamEx;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.*;
-import java.util.stream.Collectors;
 
+@Slf4j
 public class MailServiceExecutor {
-    private static final String OK = "OK";
 
     private static final String INTERRUPTED_BY_FAULTS_NUMBER = "+++ Interrupted by faults number";
     private static final String INTERRUPTED_BY_TIMEOUT = "+++ Interrupted by timeout";
     private static final String INTERRUPTED_EXCEPTION = "+++ InterruptedException";
 
-    private final ExecutorService mailExecutor = Executors.newFixedThreadPool(8);
+    private static final ExecutorService mailExecutor = Executors.newFixedThreadPool(8);
 
-    public GroupResult sendToList(final String template, final Set<String> emails) throws Exception {
+    public static GroupResult sendBulk(final Set<Addressee> addressees, final String subject, final String body) {
         final CompletionService<MailResult> completionService = new ExecutorCompletionService<>(mailExecutor);
 
-        List<Future<MailResult>> futures = emails.stream()
-                .map(email -> completionService.submit(() -> sendToUser(template, email)))
-                .collect(Collectors.toList());
+        List<Future<MailResult>> futures = StreamEx.of(addressees)
+                .map(addressee -> completionService.submit(() -> MailSender.sendTo(addressee, subject, body)))
+                .toList();
 
         return new Callable<GroupResult>() {
             private int success = 0;
@@ -50,29 +52,9 @@
                         return cancelWithFail(INTERRUPTED_EXCEPTION);
                     }
                 }
-/*
-                for (Future<MailResult> future : futures) {
-                    MailResult mailResult;
-                    try {
-                        mailResult = future.get(10, TimeUnit.SECONDS);
-                    } catch (InterruptedException e) {
-                        return cancelWithFail(INTERRUPTED_EXCEPTION);
-                    } catch (ExecutionException e) {
-                        return cancelWithFail(e.getCause().toString());
-                    } catch (TimeoutException e) {
-                        return cancelWithFail(INTERRUPTED_BY_TIMEOUT);
-                    }
-                    if (mailResult.isOk()) {
-                        success++;
-                    } else {
-                        failed.add(mailResult);
-                        if (failed.size() >= 5) {
-                            return cancelWithFail(INTERRUPTED_BY_FAULTS_NUMBER);
-                        }
-                    }
-                }
-*/
-                return new GroupResult(success, failed, null);
+                GroupResult groupResult = new GroupResult(success, failed, null);
+                log.info("groupResult: {}", groupResult);
+                return groupResult;
             }
 
             private GroupResult cancelWithFail(String cause) {
@@ -81,61 +63,4 @@
             }
         }.call();
     }
-
-    // dummy realization
-    public MailResult sendToUser(String template, String email) throws Exception {
-        try {
-            Thread.sleep(500);  //delay
-        } catch (InterruptedException e) {
-            // log cancel;
-            return null;
-        }
-        return Math.random() < 0.7 ? MailResult.ok(email) : MailResult.error(email, "Error");
-    }
-
-    public static class MailResult {
-        private final String email;
-        private final String result;
-
-        private static MailResult ok(String email) {
-            return new MailResult(email, OK);
-        }
-
-        private static MailResult error(String email, String error) {
-            return new MailResult(email, error);
-        }
-
-        public boolean isOk() {
-            return OK.equals(result);
-        }
-
-        private MailResult(String email, String cause) {
-            this.email = email;
-            this.result = cause;
-        }
-
-        @Override
-        public String toString() {
-            return '(' + email + ',' + result + ')';
-        }
-    }
-
-    public static class GroupResult {
-        private final int success; // number of successfully sent email
-        private final List<MailResult> failed; // failed emails with causes
-        private final String failedCause;  // global fail cause
-
-        public GroupResult(int success, List<MailResult> failed, String failedCause) {
-            this.success = success;
-            this.failed = failed;
-            this.failedCause = failedCause;
-        }
-
-        @Override
-        public String toString() {
-            return "Success: " + success + '\n' +
-                    "Failed: " + failed.toString() + '\n' +
-                    (failedCause == null ? "" : "Failed cause" + failedCause);
-        }
-    }
 }
\ No newline at end of file
Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java	(date 1511834626000)
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java	(revision )
@@ -5,7 +5,7 @@
 import ru.javaops.masterjava.web.WsClient;
 
 import javax.xml.namespace.QName;
-import java.util.List;
+import java.util.Set;
 
 @Slf4j
 public class MailWSClient {
@@ -20,8 +20,8 @@
     }
 
 
-    public static void sendMail(final List<Addressee> to, final List<Addressee> cc, final String subject, final String body) {
+    public static void sendToGroup(final Set<Addressee> to, final Set<Addressee> cc, final String subject, final String body) {
         log.info("Send mail to '" + to + "' cc '" + cc + "' subject '" + subject + (log.isDebugEnabled() ? "\nbody=" + body : ""));
-        WS_CLIENT.getPort().sendMail(to, cc, subject, body);
+        WS_CLIENT.getPort().sendToGroup(to, cc, subject, body);
     }
 }
