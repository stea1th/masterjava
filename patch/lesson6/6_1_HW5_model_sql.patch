Index: persist/src/main/java/ru/javaops/masterjava/persist/model/RefEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/RefEntity.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/RefEntity.java	(revision )
@@ -0,0 +1,12 @@
+package ru.javaops.masterjava.persist.model;
+
+import lombok.*;
+
+@NoArgsConstructor
+@AllArgsConstructor
+@ToString
+@EqualsAndHashCode
+abstract public class RefEntity {
+    @Getter
+    @NonNull private String ref;
+}
Index: persist/src/test/java/ru/javaops/masterjava/persist/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/test/java/ru/javaops/masterjava/persist/UserTestData.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ persist/src/test/java/ru/javaops/masterjava/persist/UserTestData.java	(revision )
@@ -3,7 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import ru.javaops.masterjava.persist.dao.UserDao;
 import ru.javaops.masterjava.persist.model.User;
-import ru.javaops.masterjava.persist.model.UserFlag;
+import ru.javaops.masterjava.persist.model.type.UserFlag;
 
 import java.util.List;
 
@@ -17,12 +17,12 @@
     public static List<User> FIST5_USERS;
 
     public static void init() {
-        ADMIN = new User("Admin", "admin@javaops.ru", UserFlag.superuser);
-        DELETED = new User("Deleted", "deleted@yandex.ru", UserFlag.deleted);
-        FULL_NAME = new User("Full Name", "gmail@gmail.com", UserFlag.active);
-        USER1 = new User("User1", "user1@gmail.com", UserFlag.active);
-        USER2 = new User("User2", "user2@yandex.ru", UserFlag.active);
-        USER3 = new User("User3", "user3@yandex.ru", UserFlag.active);
+        ADMIN = new User("Admin", "admin@javaops.ru", UserFlag.superuser, null);
+        DELETED = new User("Deleted", "deleted@yandex.ru", UserFlag.deleted, null);
+        FULL_NAME = new User("Full Name", "gmail@gmail.com", UserFlag.active, null);
+        USER1 = new User("User1", "user1@gmail.com", UserFlag.active, null);
+        USER2 = new User("User2", "user2@yandex.ru", UserFlag.active, null);
+        USER3 = new User("User3", "user3@yandex.ru", UserFlag.active, null);
         FIST5_USERS = ImmutableList.of(ADMIN, DELETED, FULL_NAME, USER1, USER2);
     }
 
Index: sql/databaseChangeLog.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sql/databaseChangeLog.sql	(revision )
+++ sql/databaseChangeLog.sql	(revision )
@@ -0,0 +1,34 @@
+--liquibase formatted sql
+
+--changeset gkislin:1
+CREATE SEQUENCE common_seq START 100000;
+
+CREATE TABLE city (
+  ref  TEXT PRIMARY KEY,
+  name TEXT NOT NULL
+);
+
+ALTER TABLE users
+  ADD COLUMN city_ref TEXT REFERENCES city (ref) ON UPDATE CASCADE;
+
+--changeset gkislin:2
+CREATE TABLE project (
+  id          INTEGER PRIMARY KEY DEFAULT nextval('common_seq'),
+  name        TEXT UNIQUE NOT NULL,
+  description TEXT
+);
+
+CREATE TYPE GROUP_TYPE AS ENUM ('REGISTERING', 'CURRENT', 'FINISHED');
+
+CREATE TABLE groups (
+  id         INTEGER PRIMARY KEY DEFAULT nextval('common_seq'),
+  name       TEXT UNIQUE NOT NULL,
+  type       GROUP_TYPE  NOT NULL,
+  project_id INTEGER     NOT NULL REFERENCES project (id)
+);
+
+CREATE TABLE user_group (
+  user_id  INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
+  group_id INTEGER NOT NULL REFERENCES groups (id),
+  CONSTRAINT users_group_idx UNIQUE (user_id, group_id)
+);
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/Project.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/Project.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/Project.java	(revision )
@@ -0,0 +1,14 @@
+package ru.javaops.masterjava.persist.model;
+
+import lombok.*;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = true)
+@ToString(callSuper = true)
+public class Project extends BaseEntity {
+
+    @NonNull private String name;
+    @NonNull private String description;
+}
Index: persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(revision )
@@ -33,23 +33,23 @@
         return id;
     }
 
-    @SqlUpdate("INSERT INTO users (full_name, email, flag) VALUES (:fullName, :email, CAST(:flag AS USER_FLAG)) ")
+    @SqlUpdate("INSERT INTO users (full_name, email, flag, city_ref) VALUES (:fullName, :email, CAST(:flag AS USER_FLAG), :cityRef) ")
     @GetGeneratedKeys
     abstract int insertGeneratedId(@BindBean User user);
 
-    @SqlUpdate("INSERT INTO users (id, full_name, email, flag) VALUES (:id, :fullName, :email, CAST(:flag AS USER_FLAG)) ")
+    @SqlUpdate("INSERT INTO users (id, full_name, email, flag, city_ref) VALUES (:id, :fullName, :email, CAST(:flag AS USER_FLAG), :cityRef) ")
     abstract void insertWitId(@BindBean User user);
 
     @SqlQuery("SELECT * FROM users ORDER BY full_name, email LIMIT :it")
     public abstract List<User> getWithLimit(@Bind int limit);
 
     //   http://stackoverflow.com/questions/13223820/postgresql-delete-all-content
-    @SqlUpdate("TRUNCATE users")
+    @SqlUpdate("TRUNCATE users CASCADE")
     @Override
     public abstract void clean();
 
     //    https://habrahabr.ru/post/264281/
-    @SqlBatch("INSERT INTO users (id, full_name, email, flag) VALUES (:id, :fullName, :email, CAST(:flag AS USER_FLAG))" +
+    @SqlBatch("INSERT INTO users (id, full_name, email, flag, city_ref) VALUES (:id, :fullName, :email, CAST(:flag AS USER_FLAG), :cityRef)" +
             "ON CONFLICT DO NOTHING")
 //            "ON CONFLICT (email) DO UPDATE SET full_name=:fullName, flag=CAST(:flag AS USER_FLAG)")
     public abstract int[] insertBatch(@BindBean List<User> users, @BatchChunkSize int chunkSize);
Index: config_templates/sql/initDB.sql
===================================================================
--- config_templates/sql/initDB.sql	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ sql/initDB.sql	(revision )
@@ -1,0 +1,0 @@
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/City.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/City.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/City.java	(revision )
@@ -0,0 +1,16 @@
+package ru.javaops.masterjava.persist.model;
+
+import lombok.*;
+
+@Data
+@NoArgsConstructor
+@EqualsAndHashCode(callSuper = true)
+@ToString(callSuper = true)
+public class City extends RefEntity {
+    public City(String ref, String name) {
+        super(ref);
+        this.name = name;
+    }
+
+    @NonNull private String name;
+}
\ No newline at end of file
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/type/GroupType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/type/GroupType.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/type/GroupType.java	(revision )
@@ -0,0 +1,7 @@
+package ru.javaops.masterjava.persist.model.type;
+
+public enum GroupType {
+    REGISTERING,
+    CURRENT,
+    FINISHED;
+}
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/Group.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/Group.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/Group.java	(revision )
@@ -0,0 +1,17 @@
+package ru.javaops.masterjava.persist.model;
+
+import com.bertoncelj.jdbi.entitymapper.Column;
+import lombok.*;
+import ru.javaops.masterjava.persist.model.type.GroupType;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = true)
+@ToString(callSuper = true)
+public class Group extends BaseEntity {
+
+    @NonNull private String name;
+    @NonNull private GroupType type;
+    @NonNull @Column("project_id") private int projectId;
+}
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/User.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/User.java	(revision )
@@ -2,19 +2,23 @@
 
 import com.bertoncelj.jdbi.entitymapper.Column;
 import lombok.*;
+import ru.javaops.masterjava.persist.model.type.UserFlag;
 
 @Data
-@RequiredArgsConstructor
-@EqualsAndHashCode(callSuper = true)
 @NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = true)
+@ToString(callSuper = true)
 public class User extends BaseEntity {
     @Column("full_name")
     private @NonNull String fullName;
     private @NonNull String email;
     private @NonNull UserFlag flag;
+    @Column("city_ref")
+    private @NonNull String cityRef;
 
-    public User(Integer id, String fullName, String email, UserFlag flag) {
-        this(fullName, email, flag);
+    public User(Integer id, String fullName, String email, UserFlag flag, String cityRef) {
+        this(fullName, email, flag, cityRef);
         this.id=id;
     }
 }
\ No newline at end of file
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(revision )
@@ -6,7 +6,7 @@
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.dao.UserDao;
 import ru.javaops.masterjava.persist.model.User;
-import ru.javaops.masterjava.persist.model.UserFlag;
+import ru.javaops.masterjava.persist.model.type.UserFlag;
 import ru.javaops.masterjava.xml.schema.ObjectFactory;
 import ru.javaops.masterjava.xml.util.JaxbParser;
 import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
@@ -59,7 +59,7 @@
 
         while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
             ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
-            final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()));
+            final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()), null);
             chunk.add(user);
             if (chunk.size() == chunkSize) {
                 addChunkFutures(chunkFutures, chunk);
Index: sql/lb_apply.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sql/lb_apply.bat	(revision )
+++ sql/lb_apply.bat	(revision )
@@ -0,0 +1,8 @@
+set LB_HOME=c:\java\liquibase-3.5.3
+call %LB_HOME%\liquibase.bat --driver=org.postgresql.Driver ^
+--classpath=%LB_HOME%\lib ^
+--changeLogFile=databaseChangeLog.sql ^
+--url="jdbc:postgresql://localhost:5432/masterjava" ^
+--username=user ^
+--password=password ^
+migrate
\ No newline at end of file
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/UserGroup.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/UserGroup.java	(revision )
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/UserGroup.java	(revision )
@@ -0,0 +1,15 @@
+package ru.javaops.masterjava.persist.model;
+
+import com.bertoncelj.jdbi.entitymapper.Column;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.NonNull;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class UserGroup {
+    @NonNull @Column("user_id") private Integer userId;
+    @NonNull @Column("group_id") private Integer groupId;
+}
\ No newline at end of file
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/BaseEntity.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/BaseEntity.java	(revision )
@@ -1,30 +1,17 @@
 package ru.javaops.masterjava.persist.model;
 
-import lombok.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
 
+@Data
 @NoArgsConstructor
 @AllArgsConstructor
-@ToString
 abstract public class BaseEntity {
 
-    @Getter
-    @Setter
     protected Integer id;
 
     public boolean isNew() {
         return id == null;
     }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        BaseEntity baseEntity = (BaseEntity) o;
-        return id != null && id.equals(baseEntity.id);
-    }
-
-    @Override
-    public int hashCode() {
-        return id == null ? 0 : id;
-    }
 }
Index: persist/src/main/java/ru/javaops/masterjava/persist/model/UserFlag.java
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/model/UserFlag.java	(revision 7d61ae323c8f4b6707bc53ec46e4d50ca23c451c)
+++ persist/src/main/java/ru/javaops/masterjava/persist/model/type/UserFlag.java	(revision )
@@ -1,4 +1,4 @@
-package ru.javaops.masterjava.persist.model;
+package ru.javaops.masterjava.persist.model.type;
 
 /**
  * gkislin
