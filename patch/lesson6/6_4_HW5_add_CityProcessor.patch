Index: web/upload/src/main/java/ru/javaops/masterjava/upload/CityProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/CityProcessor.java	(revision )
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/CityProcessor.java	(revision )
@@ -0,0 +1,32 @@
+package ru.javaops.masterjava.upload;
+
+import lombok.extern.slf4j.Slf4j;
+import lombok.val;
+import ru.javaops.masterjava.persist.DBIProvider;
+import ru.javaops.masterjava.persist.dao.CityDao;
+import ru.javaops.masterjava.persist.model.City;
+import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
+
+import javax.xml.stream.XMLStreamException;
+import java.util.ArrayList;
+import java.util.Map;
+
+@Slf4j
+public class CityProcessor {
+    private final CityDao cityDao = DBIProvider.getDao(CityDao.class);
+
+    public Map<String, City> process(StaxStreamProcessor processor) throws XMLStreamException {
+        val map = cityDao.getAsMap();
+        val newCities = new ArrayList<City>();
+
+        while (processor.startElement("City", "Cities")) {
+            val ref = processor.getAttribute("id");
+            if (!map.containsKey(ref)) {
+                newCities.add(new City(ref, processor.getText()));
+            }
+        }
+        log.info("Insert batch " + newCities);
+        cityDao.insertBatch(newCities);
+        return cityDao.getAsMap();
+    }
+}
Index: web/upload/src/test/resources/payload_bad.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/test/resources/payload_bad.xml	(revision )
+++ web/upload/src/test/resources/payload_bad.xml	(revision )
@@ -0,0 +1,31 @@
+<Payload xmlns="http://javaops.ru"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://javaops.ru payload.xsd">
+
+    <Projects>
+        <Project name="topjava">
+            <description>Topjava</description>
+            <Group name="topjava06" type="FINISHED"/>
+            <Group name="topjava07" type="FINISHED"/>
+            <Group name="topjava08" type="CURRENT"/>
+        </Project>
+        <Project name="masterjava">
+            <description>Masterjava</description>
+            <Group name="masterjava01" type="CURRENT"/>
+        </Project>
+    </Projects>
+    <Cities>
+        <City id="spb">Санкт-Петербург</City>
+        <City id="mow">Москва</City>
+        <City id="kiv">Киев</City>
+        <City id="mnsk">Минск</City>
+    </Cities>
+    <Users>
+        <User flag="active" city="kiv" email="gmail@gmail.com" groupRefs="topjava07 masterjava01">Full Name</User>
+        <User flag="superuser" city="spb" email="admin@javaops.ru" groupRefs="topjava07 topjava08 masterjava01">Admin</User>
+        <User flag="deleted" city="bad1" email="deleted@yandex.ru">Deleted</User>
+        <User flag="active" city="mow" email="user1@gmail.com" groupRefs="masterjava01 topjava06">User1</User>
+        <User flag="active" city="bad2" email="user2@yandex.ru" groupRefs="masterjava01">User2</User>
+        <User flag="active" city="mnsk" email="user3@yandex.ru" groupRefs="masterjava01">User3</User>
+    </Users>
+</Payload>
\ No newline at end of file
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(date 1511206679000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(revision )
@@ -4,6 +4,7 @@
 import lombok.val;
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.dao.UserDao;
+import ru.javaops.masterjava.persist.model.City;
 import ru.javaops.masterjava.persist.model.User;
 import ru.javaops.masterjava.persist.model.type.UserFlag;
 import ru.javaops.masterjava.upload.PayloadProcessor.FailedEmails;
@@ -35,7 +36,7 @@
     /*
      * return failed users chunks
      */
-    public List<FailedEmails> process(final StaxStreamProcessor processor, int chunkSize) throws XMLStreamException, JAXBException {
+    public List<FailedEmails> process(final StaxStreamProcessor processor, Map<String, City> cities, int chunkSize) throws XMLStreamException, JAXBException {
         log.info("Start processing with chunkSize=" + chunkSize);
 
         Map<String, Future<List<String>>> chunkFutures = new LinkedHashMap<>();  // ordered map (emailRange -> chunk future)
@@ -43,15 +44,21 @@
         int id = userDao.getSeqAndSkip(chunkSize);
         List<User> chunk = new ArrayList<>(chunkSize);
         val unmarshaller = jaxbParser.createUnmarshaller();
+        List<FailedEmails> failed = new ArrayList<>();
 
         while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
+            String cityRef = processor.getAttribute("city");  // unmarshal doesn't get city ref
             ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
-            final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()), null);
-            chunk.add(user);
-            if (chunk.size() == chunkSize) {
-                addChunkFutures(chunkFutures, chunk);
-                chunk = new ArrayList<>(chunkSize);
-                id = userDao.getSeqAndSkip(chunkSize);
+            if (cities.get(cityRef) == null) {
+                failed.add(new FailedEmails(xmlUser.getEmail(), "City '" + cityRef + "' is not present in DB"));
+            } else {
+                final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()), cityRef);
+                chunk.add(user);
+                if (chunk.size() == chunkSize) {
+                    addChunkFutures(chunkFutures, chunk);
+                    chunk = new ArrayList<>(chunkSize);
+                    id = userDao.getSeqAndSkip(chunkSize);
+                }
             }
         }
 
@@ -59,7 +66,6 @@
             addChunkFutures(chunkFutures, chunk);
         }
 
-        List<FailedEmails> failed = new ArrayList<>();
         List<String> allAlreadyPresents = new ArrayList<>();
         chunkFutures.forEach((emailRange, future) -> {
             try {
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/PayloadProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/PayloadProcessor.java	(date 1511206679000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/PayloadProcessor.java	(revision )
@@ -1,6 +1,7 @@
 package ru.javaops.masterjava.upload;
 
 import lombok.AllArgsConstructor;
+import lombok.val;
 import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
 
 import javax.xml.bind.JAXBException;
@@ -9,6 +10,7 @@
 import java.util.List;
 
 public class PayloadProcessor {
+    private final CityProcessor cityProcessor = new CityProcessor();
     private final UserProcessor userProcessor = new UserProcessor();
 
     @AllArgsConstructor
@@ -25,6 +27,7 @@
 
     public List<FailedEmails> process(InputStream is, int chunkSize) throws XMLStreamException, JAXBException {
         final StaxStreamProcessor processor = new StaxStreamProcessor(is);
-        return userProcessor.process(processor, chunkSize);
+        val cities = cityProcessor.process(processor);
+        return userProcessor.process(processor, cities, chunkSize);
     }
 }
\ No newline at end of file
