Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(date 1510588298000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(revision )
@@ -1,6 +1,5 @@
 package ru.javaops.masterjava.upload;
 
-import one.util.streamex.StreamEx;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import ru.javaops.masterjava.persist.DBIProvider;
@@ -17,8 +16,10 @@
 import javax.xml.stream.events.XMLEvent;
 import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.concurrent.Callable;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
@@ -32,85 +33,71 @@
 
     private ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_THREADS);
 
-    public static class FailedChunk {
-        public String emailOrRange;
+    public static class FailedEmails {
+        public String emailsOrRange;
         public String reason;
 
-        public FailedChunk(String emailOrRange, String reason) {
-            this.emailOrRange = emailOrRange;
+        public FailedEmails(String emailsOrRange, String reason) {
+            this.emailsOrRange = emailsOrRange;
             this.reason = reason;
         }
 
         @Override
         public String toString() {
-            return emailOrRange + " : " + reason;
+            return emailsOrRange + " : " + reason;
         }
     }
 
     /*
      * return failed users chunks
      */
-    public List<FailedChunk> process(final InputStream is, int chunkSize) throws XMLStreamException, JAXBException {
+    public List<FailedEmails> process(final InputStream is, int chunkSize) throws XMLStreamException, JAXBException {
         log.info("Start processing with chunkSize=" + chunkSize);
 
-        return new Callable<List<FailedChunk>>() {
-            class ChunkFuture {
-                String emailRange;
-                Future<List<String>> future;
-
-                public ChunkFuture(List<User> chunk, Future<List<String>> future) {
-                    this.future = future;
-                    this.emailRange = chunk.get(0).getEmail();
-                    if (chunk.size() > 1) {
-                        this.emailRange += '-' + chunk.get(chunk.size() - 1).getEmail();
-                    }
-                }
-            }
-
-            @Override
-            public List<FailedChunk> call() throws XMLStreamException, JAXBException {
-                List<ChunkFuture> futures = new ArrayList<>();
+        Map<String, Future<List<String>>> chunkFutures = new LinkedHashMap<>();  // ordered map (emailRange -> chunk future)
 
-                int id = userDao.getSeqAndSkip(chunkSize);
-                List<User> chunk = new ArrayList<>(chunkSize);
-                final StaxStreamProcessor processor = new StaxStreamProcessor(is);
-                JaxbUnmarshaller unmarshaller = jaxbParser.createUnmarshaller();
+        int id = userDao.getSeqAndSkip(chunkSize);
+        List<User> chunk = new ArrayList<>(chunkSize);
+        final StaxStreamProcessor processor = new StaxStreamProcessor(is);
+        JaxbUnmarshaller unmarshaller = jaxbParser.createUnmarshaller();
 
-                while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
-                    ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
-                    final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()));
-                    chunk.add(user);
-                    if (chunk.size() == chunkSize) {
-                        futures.add(submit(chunk));
-                        chunk = new ArrayList<>(chunkSize);
-                        id = userDao.getSeqAndSkip(chunkSize);
-                    }
-                }
+        while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
+            ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
+            final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()));
+            chunk.add(user);
+            if (chunk.size() == chunkSize) {
+                addChunkFutures(chunkFutures, chunk);
+                chunk = new ArrayList<>(chunkSize);
+                id = userDao.getSeqAndSkip(chunkSize);
+            }
+        }
 
-                if (!chunk.isEmpty()) {
-                    futures.add(submit(chunk));
-                }
+        if (!chunk.isEmpty()) {
+            addChunkFutures(chunkFutures, chunk);
+        }
 
-                List<FailedChunk> failed = new ArrayList<>();
-                futures.forEach(cf -> {
-                    try {
-                        failed.addAll(StreamEx.of(cf.future.get()).map(email -> new FailedChunk(email, "already present")).toList());
-                        log.info(cf.emailRange + " successfully executed");
-                    } catch (Exception e) {
-                        log.error(cf.emailRange + " failed", e);
-                        failed.add(new FailedChunk(cf.emailRange, e.toString()));
-                    }
-                });
-                return failed;
-            }
+        List<FailedEmails> failed = new ArrayList<>();
+        List<String> allAlreadyPresents = new ArrayList<>();
+        chunkFutures.forEach((emailRange, future) -> {
+            try {
+                List<String> alreadyPresentsInChunk = future.get();
+                log.info("{} successfully executed with already presents: {}", emailRange, alreadyPresentsInChunk);
+                allAlreadyPresents.addAll(alreadyPresentsInChunk);
+            } catch (InterruptedException | ExecutionException e) {
+                log.error(emailRange + " failed", e);
+                failed.add(new FailedEmails(emailRange, e.toString()));
+            }
+        });
+        if (!allAlreadyPresents.isEmpty()) {
+            failed.add(new FailedEmails(allAlreadyPresents.toString(), "already presents"));
+        }
+        return failed;
+    }
 
-            private ChunkFuture submit(List<User> chunk) {
-                ChunkFuture chunkFuture = new ChunkFuture(chunk,
-                        executorService.submit(() -> userDao.insertAndGetConflictEmails(chunk))
-                );
-                log.info("Submit chunk: " + chunkFuture.emailRange);
-                return chunkFuture;
-            }
-        }.call();
+    private void addChunkFutures(Map<String, Future<List<String>>> chunkFutures, List<User> chunk) {
+        String emailRange = String.format("[%s-%s]", chunk.get(0).getEmail(), chunk.get(chunk.size() - 1).getEmail());
+        Future<List<String>> future = executorService.submit(() -> userDao.insertAndGetConflictEmails(chunk));
+        chunkFutures.put(emailRange, future);
+        log.info("Submit chunk: " + emailRange);
     }
 }
Index: web/upload/src/main/webapp/WEB-INF/templates/result.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/webapp/WEB-INF/templates/result.html	(date 1510588298000)
+++ web/upload/src/main/webapp/WEB-INF/templates/result.html	(revision )
@@ -7,7 +7,7 @@
 <h4><a href="">Upload XML</a></h4>
 <h3>Failed users</h3>
 <ul>
-    <!--/*@thymesVar id="users" type="java.util.List<ru.javaops.masterjava.upload.UserProcessor$FailedChunk>"*/-->
+    <!--/*@thymesVar id="users" type="java.util.List<ru.javaops.masterjava.upload.UserProcessor.FailedMails>"*/-->
     <li th:each="user: ${users}" th:text="${user}"></li>
 </ul>
 </body>
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java	(date 1510588298000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java	(revision )
@@ -43,7 +43,7 @@
             } else {
                 Part filePart = req.getPart("fileToUpload");
                 try (InputStream is = filePart.getInputStream()) {
-                    List<UserProcessor.FailedChunk> failed = userProcessor.process(is, chunkSize);
+                    List<UserProcessor.FailedEmails> failed = userProcessor.process(is, chunkSize);
                     log.info("Failed users: " + failed);
                     final WebContext webContext =
                             new WebContext(req, resp, req.getServletContext(), req.getLocale(),
