Index: persist/src/test/java/ru/javaops/masterjava/persist/dao/UserDaoTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/test/java/ru/javaops/masterjava/persist/dao/UserDaoTest.java	(date 1510588225000)
+++ persist/src/test/java/ru/javaops/masterjava/persist/dao/UserDaoTest.java	(revision )
@@ -39,4 +39,11 @@
         dao.insertBatch(FIST5_USERS, 3);
         Assert.assertEquals(5, dao.getWithLimit(100).size());
     }
+
+    @Test
+    public void getSeqAndSkip() throws Exception {
+        int seq1 = dao.getSeqAndSkip(5);
+        int seq2 = dao.getSeqAndSkip(1);
+        Assert.assertEquals(5, seq2 - seq1);
+    }
 }
\ No newline at end of file
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(date 1510588225000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UserProcessor.java	(revision )
@@ -1,6 +1,8 @@
 package ru.javaops.masterjava.upload;
 
-import one.util.streamex.IntStreamEx;
+import one.util.streamex.StreamEx;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.dao.UserDao;
 import ru.javaops.masterjava.persist.model.User;
@@ -16,28 +18,99 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 
 public class UserProcessor {
+    private static final Logger log = LoggerFactory.getLogger(UserProcessor.class);
+    private static final int NUMBER_THREADS = 4;
+
     private static final JaxbParser jaxbParser = new JaxbParser(ObjectFactory.class);
     private static UserDao userDao = DBIProvider.getDao(UserDao.class);
 
+    private ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_THREADS);
+
+    public static class FailedChunk {
+        public String emailOrRange;
+        public String reason;
+
+        public FailedChunk(String emailOrRange, String reason) {
+            this.emailOrRange = emailOrRange;
+            this.reason = reason;
+        }
+
+        @Override
+        public String toString() {
+            return emailOrRange + " : " + reason;
+        }
+    }
+
     /*
-     * return users, already present in DB
+     * return failed users chunks
      */
-    public List<User> process(final InputStream is, int chunkSize) throws XMLStreamException, JAXBException {
-        final StaxStreamProcessor processor = new StaxStreamProcessor(is);
-        List<User> users = new ArrayList<>();
-
-        JaxbUnmarshaller unmarshaller = jaxbParser.createUnmarshaller();
-        while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
-            ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
-            final User user = new User(xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()));
-            users.add(user);
-        }
-        int[] result = userDao.insertBatch(users, chunkSize);
-        return IntStreamEx.range(0, users.size())
-                .filter(i -> result[i] == 0)
-                .mapToObj(users::get)
-                .toList();
+    public List<FailedChunk> process(final InputStream is, int chunkSize) throws XMLStreamException, JAXBException {
+        log.info("Start processing with chunkSize=" + chunkSize);
+
+        return new Callable<List<FailedChunk>>() {
+            class ChunkFuture {
+                String emailRange;
+                Future<List<String>> future;
+
+                public ChunkFuture(List<User> chunk, Future<List<String>> future) {
+                    this.future = future;
+                    this.emailRange = chunk.get(0).getEmail();
+                    if (chunk.size() > 1) {
+                        this.emailRange += '-' + chunk.get(chunk.size() - 1).getEmail();
+                    }
+                }
+            }
+
+            @Override
+            public List<FailedChunk> call() throws XMLStreamException, JAXBException {
+                List<ChunkFuture> futures = new ArrayList<>();
+
+                int id = userDao.getSeqAndSkip(chunkSize);
+                List<User> chunk = new ArrayList<>(chunkSize);
+                final StaxStreamProcessor processor = new StaxStreamProcessor(is);
+                JaxbUnmarshaller unmarshaller = jaxbParser.createUnmarshaller();
+
+                while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
+                    ru.javaops.masterjava.xml.schema.User xmlUser = unmarshaller.unmarshal(processor.getReader(), ru.javaops.masterjava.xml.schema.User.class);
+                    final User user = new User(id++, xmlUser.getValue(), xmlUser.getEmail(), UserFlag.valueOf(xmlUser.getFlag().value()));
+                    chunk.add(user);
+                    if (chunk.size() == chunkSize) {
+                        futures.add(submit(chunk));
+                        chunk = new ArrayList<>(chunkSize);
+                        id = userDao.getSeqAndSkip(chunkSize);
+                    }
+                }
+
+                if (!chunk.isEmpty()) {
+                    futures.add(submit(chunk));
+                }
+
+                List<FailedChunk> failed = new ArrayList<>();
+                futures.forEach(cf -> {
+                    try {
+                        failed.addAll(StreamEx.of(cf.future.get()).map(email -> new FailedChunk(email, "already present")).toList());
+                        log.info(cf.emailRange + " successfully executed");
+                    } catch (Exception e) {
+                        log.error(cf.emailRange + " failed", e);
+                        failed.add(new FailedChunk(cf.emailRange, e.toString()));
+                    }
+                });
+                return failed;
+            }
+
+            private ChunkFuture submit(List<User> chunk) {
+                ChunkFuture chunkFuture = new ChunkFuture(chunk,
+                        executorService.submit(() -> userDao.insertAndGetConflictEmails(chunk))
+                );
+                log.info("Submit chunk: " + chunkFuture.emailRange);
+                return chunkFuture;
+            }
+        }.call();
     }
 }
Index: web/upload/src/main/webapp/WEB-INF/templates/result.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/webapp/WEB-INF/templates/result.html	(date 1510588225000)
+++ web/upload/src/main/webapp/WEB-INF/templates/result.html	(revision )
@@ -1,27 +1,14 @@
 <html xmlns:th="http://www.thymeleaf.org">
 <head>
     <meta charset="UTF-8">
-    <title>Already present users</title>
+    <title>Failed users</title>
 </head>
 <body>
 <h4><a href="">Upload XML</a></h4>
-<h3>Already present users</h3>
-<table border="1" cellpadding="8" cellspacing="0">
-    <thead>
-    <tr>
-        <th>Full Name</th>
-        <th>Email</th>
-        <th>Flag</th>
-    </tr>
-    </thead>
-    <tbody>
-    <!--/*@thymesVar id="users" type="java.util.List<ru.javaops.masterjava.model.User>"*/-->
-    <tr th:each="user : ${users}">
-        <td th:text="${user.fullName}"></td>
-        <td th:utext="${user.email}"></td>
-        <td th:text="${user.flag}"></td>
-    </tr>
-    </tbody>
-</table>
+<h3>Failed users</h3>
+<ul>
+    <!--/*@thymesVar id="users" type="java.util.List<ru.javaops.masterjava.upload.UserProcessor$FailedChunk>"*/-->
+    <li th:each="user: ${users}" th:text="${user}"></li>
+</ul>
 </body>
 </html>
\ No newline at end of file
Index: persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(date 1510588225000)
+++ persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(revision )
@@ -1,9 +1,11 @@
 package ru.javaops.masterjava.persist.dao;
 
 import com.bertoncelj.jdbi.entitymapper.EntityMapperFactory;
+import one.util.streamex.IntStreamEx;
 import org.skife.jdbi.v2.sqlobject.*;
 import org.skife.jdbi.v2.sqlobject.customizers.BatchChunkSize;
 import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapperFactory;
+import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.model.User;
 
 import java.util.List;
@@ -21,6 +23,16 @@
         return user;
     }
 
+    @SqlQuery("SELECT nextval('user_seq')")
+    abstract int getNextVal();
+
+    @Transaction
+    public int getSeqAndSkip(int step) {
+        int id = getNextVal();
+        DBIProvider.getDBI().useHandle(h -> h.execute("ALTER SEQUENCE user_seq RESTART WITH " + (id + step)));
+        return id;
+    }
+
     @SqlUpdate("INSERT INTO users (full_name, email, flag) VALUES (:fullName, :email, CAST(:flag AS USER_FLAG)) ")
     @GetGeneratedKeys
     abstract int insertGeneratedId(@BindBean User user);
@@ -37,8 +49,17 @@
     public abstract void clean();
 
     //    https://habrahabr.ru/post/264281/
-    @SqlBatch("INSERT INTO users (full_name, email, flag) VALUES (:fullName, :email, CAST(:flag AS USER_FLAG))" +
+    @SqlBatch("INSERT INTO users (id, full_name, email, flag) VALUES (:id, :fullName, :email, CAST(:flag AS USER_FLAG))" +
             "ON CONFLICT DO NOTHING")
 //            "ON CONFLICT (email) DO UPDATE SET full_name=:fullName, flag=CAST(:flag AS USER_FLAG)")
     public abstract int[] insertBatch(@BindBean List<User> users, @BatchChunkSize int chunkSize);
+
+
+    public List<String> insertAndGetConflictEmails(List<User> users) {
+        int[] result = insertBatch(users, users.size());
+        return IntStreamEx.range(0, users.size())
+                .filter(i -> result[i] == 0)
+                .mapToObj(index -> users.get(index).getEmail())
+                .toList();
+    }
 }
Index: web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java	(date 1510588225000)
+++ web/upload/src/main/java/ru/javaops/masterjava/upload/UploadServlet.java	(revision )
@@ -4,7 +4,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.thymeleaf.context.WebContext;
-import ru.javaops.masterjava.persist.model.User;
 
 import javax.servlet.ServletException;
 import javax.servlet.annotation.MultipartConfig;
@@ -44,11 +43,11 @@
             } else {
                 Part filePart = req.getPart("fileToUpload");
                 try (InputStream is = filePart.getInputStream()) {
-                    List<User> alreadyPresentUsers = userProcessor.process(is, chunkSize);
-                    log.info("Already present in DB " + alreadyPresentUsers.size() + " users");
+                    List<UserProcessor.FailedChunk> failed = userProcessor.process(is, chunkSize);
+                    log.info("Failed users: " + failed);
                     final WebContext webContext =
                             new WebContext(req, resp, req.getServletContext(), req.getLocale(),
-                                    ImmutableMap.of("users", alreadyPresentUsers));
+                                    ImmutableMap.of("users", failed));
                     engine.process("result", webContext, resp.getWriter());
                     return;
                 }
