Index: src/test/java/ru/javaops/masterjava/MainXml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javaops/masterjava/MainXml.java	(date 1509203657000)
+++ src/test/java/ru/javaops/masterjava/MainXml.java	(revision )
@@ -1,5 +1,6 @@
 package ru.javaops.masterjava;
 
+import com.google.common.base.Splitter;
 import com.google.common.io.Resources;
 import j2html.tags.ContainerTag;
 import one.util.streamex.StreamEx;
@@ -9,7 +10,9 @@
 import ru.javaops.masterjava.xml.schema.User;
 import ru.javaops.masterjava.xml.util.JaxbParser;
 import ru.javaops.masterjava.xml.util.Schemas;
+import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
 
+import javax.xml.stream.events.XMLEvent;
 import java.io.InputStream;
 import java.io.Writer;
 import java.net.URL;
@@ -18,13 +21,16 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
+import static com.google.common.base.Strings.nullToEmpty;
 import static j2html.TagCreator.*;
 
 public class MainXml {
 
+    private static final Comparator<User> USER_COMPARATOR = Comparator.comparing(User::getValue).thenComparing(User::getEmail);
+
     public static void main(String[] args) throws Exception {
         if (args.length != 1) {
-            System.out.println("Format: projectName");
+            System.out.println("Required argument: projectName");
             System.exit(1);
         }
         String projectName = args[0];
@@ -33,11 +39,16 @@
         Set<User> users = parseByJaxb(projectName, payloadUrl);
         users.forEach(System.out::println);
 
+        System.out.println();
         String html = toHtml(users, projectName);
         System.out.println(html);
         try (Writer writer = Files.newBufferedWriter(Paths.get("out/users.html"))) {
             writer.write(html);
         }
+
+        System.out.println();
+        users = processByStax(projectName, payloadUrl);
+        users.forEach(System.out::println);
     }
 
     private static Set<User> parseByJaxb(String projectName, URL payloadUrl) throws Exception {
@@ -57,9 +68,49 @@
         return StreamEx.of(payload.getUsers().getUser())
                 .filter(u -> !Collections.disjoint(groups, u.getGroupRefs()))
                 .collect(
-                        Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(User::getValue).thenComparing(User::getEmail)))
+                        Collectors.toCollection(() -> new TreeSet<>(USER_COMPARATOR))
                 );
     }
+
+    private static Set<User> processByStax(String projectName, URL payloadUrl) throws Exception {
+
+        try (InputStream is = payloadUrl.openStream()) {
+            StaxStreamProcessor processor = new StaxStreamProcessor(is);
+            final Set<String> groupNames = new HashSet<>();
+
+            // Projects loop
+            projects:
+            while (processor.doUntil(XMLEvent.START_ELEMENT, "Project")) {
+                if (projectName.equals(processor.getAttribute("name"))) {
+                    // Groups loop
+                    String element;
+                    while ((element = processor.doUntilAny(XMLEvent.START_ELEMENT, "Project", "Group", "Users")) != null) {
+                        if (!element.equals("Group")) {
+                            break projects;
+                        }
+                        groupNames.add(processor.getAttribute("name"));
+                    }
+                }
+            }
+            if (groupNames.isEmpty()) {
+                throw new IllegalArgumentException("Invalid " + projectName + " or no groups");
+            }
+
+            // Users loop
+            Set<User> users = new TreeSet<>(USER_COMPARATOR);
+
+            while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
+                String groupRefs = processor.getAttribute("groupRefs");
+                if (!Collections.disjoint(groupNames, Splitter.on(' ').splitToList(nullToEmpty(groupRefs)))) {
+                    User user = new User();
+                    user.setEmail(processor.getAttribute("email"));
+                    user.setValue(processor.getText());
+                    users.add(user);
+                }
+            }
+            return users;
+        }
+    }
 
     private static String toHtml(Set<User> users, String projectName) {
         final ContainerTag table = table().with(
Index: src/main/java/ru/javaops/masterjava/xml/util/StaxStreamProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/masterjava/xml/util/StaxStreamProcessor.java	(date 1509203657000)
+++ src/main/java/ru/javaops/masterjava/xml/util/StaxStreamProcessor.java	(revision )
@@ -20,15 +20,26 @@
     }
 
     public boolean doUntil(int stopEvent, String value) throws XMLStreamException {
+        return doUntilAny(stopEvent, value) != null;
+    }
+
+    public String getAttribute(String name) throws XMLStreamException {
+        return reader.getAttributeValue(null, name);
+    }
+
+    public String doUntilAny(int stopEvent, String... values) throws XMLStreamException {
         while (reader.hasNext()) {
             int event = reader.next();
             if (event == stopEvent) {
-                if (value.equals(getValue(event))) {
-                    return true;
+                String xmlValue = getValue(event);
+                for (String value : values) {
+                    if (value.equals(xmlValue)) {
+                        return xmlValue;
+                    }
                 }
             }
         }
-        return false;
+        return null;
     }
 
     public String getValue(int event) throws XMLStreamException {
