Index: src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java	(date 1508268723000)
+++ src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java	(revision )
@@ -1,134 +1,39 @@
 package ru.javaops.masterjava.matrix;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
 import java.util.concurrent.*;
-import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-/**
- * gkislin
- * 03.07.2016
- */
 public class MatrixUtil {
 
-    public static int[][] concurrentMultiply(int[][] matrixA, int[][] matrixB, ExecutorService executor) throws InterruptedException, ExecutionException {
-        final int matrixSize = matrixA.length;
-        final int[][] matrixC = new int[matrixSize][matrixSize];
-
-        class ColumnMultipleResult {
-            private final int col;
-            private final int[] columnC;
-
-            private ColumnMultipleResult(int col, int[] columnC) {
-                this.col = col;
-                this.columnC = columnC;
-            }
-        }
-
-        final CompletionService<ColumnMultipleResult> completionService = new ExecutorCompletionService<>(executor);
-
-        for (int j = 0; j < matrixSize; j++) {
-            final int col = j;
-            final int[] columnB = new int[matrixSize];
-            for (int k = 0; k < matrixSize; k++) {
-                columnB[k] = matrixB[k][col];
-            }
-            completionService.submit(() -> {
-                final int[] columnC = new int[matrixSize];
-
-                for (int row = 0; row < matrixSize; row++) {
-                    final int[] rowA = matrixA[row];
-                    int sum = 0;
-                    for (int k = 0; k < matrixSize; k++) {
-                        sum += rowA[k] * columnB[k];
-                    }
-                    columnC[row] = sum;
-                }
-                return new ColumnMultipleResult(col, columnC);
-            });
-        }
-
-        for (int i = 0; i < matrixSize; i++) {
-            ColumnMultipleResult res = completionService.take().get();
-            for (int k = 0; k < matrixSize; k++) {
-                matrixC[k][res.col] = res.columnC[k];
-            }
-        }
-        return matrixC;
-    }
-
-    public static int[][] concurrentMultiplyCayman(int[][] matrixA, int[][] matrixB, ExecutorService executor) throws InterruptedException, ExecutionException {
-        final int matrixSize = matrixA.length;
-        final int[][] matrixResult = new int[matrixSize][matrixSize];
-        final int threadCount = Runtime.getRuntime().availableProcessors();
-        final int maxIndex = matrixSize * matrixSize;
-        final int cellsInThread = maxIndex / threadCount;
-        final int[][] matrixBFinal = new int[matrixSize][matrixSize];
-
-        for (int i = 0; i < matrixSize; i++) {
-            for (int j = 0; j < matrixSize; j++) {
-                matrixBFinal[i][j] = matrixB[j][i];
-            }
-        }
-
-        Set<Callable<Boolean>> threads = new HashSet<>();
-        int fromIndex = 0;
-        for (int i = 1; i <= threadCount; i++) {
-            final int toIndex = i == threadCount ? maxIndex : fromIndex + cellsInThread;
-            final int firstIndexFinal = fromIndex;
-            threads.add(() -> {
-                for (int j = firstIndexFinal; j < toIndex; j++) {
-                    final int row = j / matrixSize;
-                    final int col = j % matrixSize;
-
-                    int sum = 0;
-                    for (int k = 0; k < matrixSize; k++) {
-                        sum += matrixA[row][k] * matrixBFinal[col][k];
-                    }
-                    matrixResult[row][col] = sum;
-                }
-                return true;
-            });
-            fromIndex = toIndex;
-        }
-        executor.invokeAll(threads);
-        return matrixResult;
-    }
-
-    public static int[][] concurrentMultiplyDarthVader(int[][] matrixA, int[][] matrixB, ExecutorService executor)
+    public static int[][] concurrentMultiplyStreams(int[][] matrixA, int[][] matrixB, int threadNumber)
             throws InterruptedException, ExecutionException {
 
         final int matrixSize = matrixA.length;
         final int[][] matrixC = new int[matrixSize][matrixSize];
 
-        List<Callable<Void>> tasks = IntStream.range(0, matrixSize)
-                .parallel()
-                .mapToObj(i -> new Callable<Void>() {
-                    private final int[] tempColumn = new int[matrixSize];
+        new ForkJoinPool(threadNumber).submit(
+                () -> IntStream.range(0, matrixSize)
+                        .parallel()
+                        .forEach(row -> {
+                            final int[] rowA = matrixA[row];
+                            final int[] rowC = matrixC[row];
 
-                    @Override
-                    public Void call() throws Exception {
-                        for (int c = 0; c < matrixSize; c++) {
-                            tempColumn[c] = matrixB[c][i];
-                        }
-                        for (int j = 0; j < matrixSize; j++) {
-                            int row[] = matrixA[j];
-                            int sum = 0;
-                            for (int k = 0; k < matrixSize; k++) {
-                                sum += tempColumn[k] * row[k];
+                            for (int idx = 0; idx < matrixSize; idx++) {
+                                final int elA = rowA[idx];
+                                final int[] rowB = matrixB[idx];
+                                for (int col = 0; col < matrixSize; col++) {
+                                    rowC[col] += elA * rowB[col];
+                                }
                             }
-                            matrixC[j][i] = sum;
-                        }
-                        return null;
-                    }
-                })
-                .collect(Collectors.toList());
+                        })).get();
 
-        executor.invokeAll(tasks);
         return matrixC;
     }
 
-    public static int[][] concurrentMultiply2(int[][] matrixA, int[][] matrixB, ExecutorService executor) throws InterruptedException, ExecutionException {
+    public static int[][] concurrentMultiply(int[][] matrixA, int[][] matrixB, ExecutorService executor) throws InterruptedException, ExecutionException {
         final int matrixSize = matrixA.length;
         final int[][] matrixC = new int[matrixSize][];
 
@@ -161,7 +66,30 @@
         return matrixC;
     }
 
-    // Optimized by https://habrahabr.ru/post/114797/
+    public static int[][] concurrentMultiply2(int[][] matrixA, int[][] matrixB, ExecutorService executor) throws InterruptedException {
+        final int matrixSize = matrixA.length;
+        final int[][] matrixC = new int[matrixSize][matrixSize];
+        final CountDownLatch latch = new CountDownLatch(matrixSize);
+
+        for (int row = 0; row < matrixSize; row++) {
+            final int[] rowA = matrixA[row];
+            final int[] rowC = matrixC[row];
+
+            executor.submit(() -> {
+                for (int idx = 0; idx < matrixSize; idx++) {
+                    final int elA = rowA[idx];
+                    final int[] rowB = matrixB[idx];
+                    for (int col = 0; col < matrixSize; col++) {
+                        rowC[col] += elA * rowB[col];
+                    }
+                }
+                latch.countDown();
+            });
+        }
+        latch.await();
+        return matrixC;
+    }
+
     public static int[][] singleThreadMultiplyOpt(int[][] matrixA, int[][] matrixB) {
         final int matrixSize = matrixA.length;
         final int[][] matrixC = new int[matrixSize][matrixSize];
@@ -183,6 +111,25 @@
         }
         return matrixC;
     }
+
+    public static int[][] singleThreadMultiplyOpt2(int[][] matrixA, int[][] matrixB) {
+        final int matrixSize = matrixA.length;
+        final int[][] matrixC = new int[matrixSize][matrixSize];
+
+        for (int row = 0; row < matrixSize; row++) {
+            final int[] rowA = matrixA[row];
+            final int[] rowC = matrixC[row];
+
+            for (int idx = 0; idx < matrixSize; idx++) {
+                final int elA = rowA[idx];
+                final int[] rowB = matrixB[idx];
+                for (int col = 0; col < matrixSize; col++) {
+                    rowC[col] += elA * rowB[col];
+                }
+            }
+        }
+        return matrixC;
+    }
 
     public static int[][] create(int size) {
         int[][] matrix = new int[size][size];
Index: src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java	(date 1508268723000)
+++ src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java	(revision )
@@ -4,10 +4,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-/**
- * gkislin
- * 03.07.2016
- */
 public class MainMatrix {
     private static final int MATRIX_SIZE = 1000;
     private static final int THREAD_NUMBER = 10;
@@ -30,7 +26,7 @@
             singleThreadSum += duration;
 
             start = System.currentTimeMillis();
-            final int[][] concurrentMatrixC = MatrixUtil.concurrentMultiply(matrixA, matrixB, executor);
+            final int[][] concurrentMatrixC = MatrixUtil.concurrentMultiplyStreams(matrixA, matrixB, Runtime.getRuntime().availableProcessors() - 1);
             duration = (System.currentTimeMillis() - start) / 1000.;
             out("Concurrent thread time, sec: %.3f", duration);
             concurrentThreadSum += duration;
